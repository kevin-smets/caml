#!/usr/bin/env node
'use strict';

var util = require('util');
var yargs = require('yargs');

var camel = require('../lib/caml');

const argv = yargs
    .usage('caml --files fileOne fileTwo... [--dir directory/path] [--overrides "var.i.able: true"]')

    // option: directory
    .string('dir')
    .alias('d', 'dir')
    .describe('dir', 'Path (rel or abs) to the yml files, default is cwd')

    // option: files
    .array('files')
    .alias('f', 'files')
    .describe('files', 'An array of yaml files to merge sequentially (without extension)')
    .required('files')

    // option: overrides
    .array('overrides')
    .alias('o', 'overrides')
    .describe('overrides', 'Variables to override via cli e.g: "var.i.able": true')

    // option: json
    .string('json')
    .alias('j', 'json')
    .describe('json', 'output to a json file e.g: -j out.json')

    // option: yaml
    .string('yaml')
    .alias('y', 'yaml')
    .describe('yaml', 'output to a yaml file e.g: -y out.yml')

    // flag: help
    .help('h')

    // flag: version
    .version()

    .argv;

// Check the CLI parameters
if (argv.files && argv.files.length > 0) {
    var json = camel.camlize(argv);
    console.log(util.inspect(json, {depth: null}));

    if (argv.j) {
        var fs = require('fs');
        fs.writeFileSync(argv.j, JSON.stringify(json));
    }

    if (argv.y) {
        var fs = require('fs');
        var yamlJs = require('yamljs');
        fs.writeFileSync(argv.y, yamlJs.stringify(json, 20, 2));
    }
}
